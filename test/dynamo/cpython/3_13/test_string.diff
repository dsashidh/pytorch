diff --git a/test/dynamo/cpython/3_13/test_string.py b/test/dynamo/cpython/3_13/test_string.py
index 824b89ad517..badd58a304f 100644
--- a/test/dynamo/cpython/3_13/test_string.py
+++ b/test/dynamo/cpython/3_13/test_string.py
@@ -1,9 +1,60 @@
+# ======= BEGIN Dynamo patch =======
+# Owner(s): ["module: dynamo"]
+
+# ruff: noqa
+# flake8: noqa
+
+import sys
+import torch
+import torch._dynamo.test_case
+import unittest
+from torch._dynamo.test_case import CPythonTestCase
+from torch.testing._internal.common_utils import run_tests
+
+__TestCase = CPythonTestCase
+
+
+# redirect import statements
+import sys
+import importlib.abc
+
+redirect_imports = (
+    "test.mapping_tests",
+    "test.typinganndata",
+    "test.test_grammar",
+    "test.test_math",
+    "test.test_iter",
+    "test.typinganndata.ann_module",
+)
+
+class RedirectImportFinder(importlib.abc.MetaPathFinder):
+    def find_spec(self, fullname, path, target=None):
+        # Check if the import is the problematic one
+        if fullname in redirect_imports:
+            try:
+                # Attempt to import the standalone module
+                name = fullname.removeprefix("test.")
+                r = importlib.import_module(name)
+                # Redirect the module in sys.modules
+                sys.modules[fullname] = r
+                # Return a module spec from the found module
+                return importlib.util.find_spec(name)
+            except ImportError:
+                return None
+        return None
+
+# Add the custom finder to sys.meta_path
+sys.meta_path.insert(0, RedirectImportFinder())
+
+
+# ======= END DYNAMO PATCH =======
+
 import unittest
 import string
 from string import Template
 
 
-class ModuleTest(unittest.TestCase):
+class ModuleTest(__TestCase):
 
     def test_attrs(self):
         # While the exact order of the items in these attributes is not
@@ -204,7 +255,7 @@ class Mapping:
         return obj
 
 
-class TestTemplate(unittest.TestCase):
+class TestTemplate(__TestCase):
     def test_regular_templates(self):
         s = Template('$who likes to eat a bag of $what worth $$100')
         self.assertEqual(s.substitute(dict(who='tim', what='ham')),
@@ -527,5 +578,5 @@ class TestTemplate(unittest.TestCase):
         self.assertRaises(ValueError, s.get_identifiers)
 
 
-if __name__ == '__main__':
-    unittest.main()
+if __name__ == "__main__":
+    run_tests()
